import asyncio
import aio_pika
import msgpack
from aiogram import F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aio_pika import ExchangeType
from src.storage.rabbit import channel_pool
from config.settings import settings
from src.handlers.callback.router import router
from aiogram.fsm.context import FSMContext
from src.handlers.command.menu import menu
from consumer.logger import LOGGING_CONFIG, logger
import logging.config
from src.templates.env import render
from src.storage.minio import minio_client


@router.callback_query(F.data == "find_pair")
async def find_pair_handler(call: CallbackQuery, state: FSMContext):
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info(f"–ü–û–ò–°–ö –ê–ù–ö–ï–¢ –ù–ê–ß–ê–õ–°–Ø {call.from_user.id}")
    await call.message.answer("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã...")

    async with channel_pool.acquire() as channel:
        exchange = await channel.declare_exchange(
            "user_form", ExchangeType.TOPIC, durable=True
        )

        queue_name = settings.USER_QUEUE.format(user_id=call.from_user.id)
        user_queue = await channel.declare_queue(queue_name, durable=True)

        await user_queue.bind(exchange, routing_key=queue_name)

        request_body = {
            "user_id": call.from_user.id,
            "action": "find_pair"
        }

        logging.config.dictConfig(LOGGING_CONFIG)
        logger.info("–ó–ê–ü–†–û–° –ü–û–®–ï–õ –í USER_MEASSAGES")

        await exchange.publish(
            aio_pika.Message(msgpack.packb(request_body)),
            routing_key="user_messages"
        )


        retries = 3
        for _ in range(retries):
            try:
                res = await user_queue.get(timeout=3)
                await res.ack()
                data = msgpack.unpackb(res.body)
                candidates = data.get("candidates", [])
                logging.config.dictConfig(LOGGING_CONFIG)
                logger.info("–ü–†–ò–ù–Ø–õ–ò –ö–ê–ù–î–ò–î–ê–¢–û–í")
                if not candidates:
                    await call.message.answer("üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                await state.set_data({"candidates": candidates, "current_index": 0})
                await show_next_candidate(call, state)
                return

            except asyncio.QueueEmpty:
                logging.config.dictConfig(LOGGING_CONFIG)
                logger.info("–û–ß–ï–†–ï–î–¨ –ü–£–°–¢–ê–Ø!!!!!!")
                await asyncio.sleep(1)

        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_next_candidate(call: CallbackQuery, state: FSMContext):
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–ü–û–ö–ê–ó –ö–ê–ù–î–ò–î–ê–¢–û–í")
    data = await state.get_data()
    index = data.get("current_index", 0)
    candidates = data.get("candidates", [])

    if index >= len(candidates):
        await call.message.answer("‚úÖ –ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç.")
        await menu(call.message)
        await state.clear()
        return

    candidate = candidates[index]

    # TODO: –§–û–¢–ö–£ –ò–ó –ú–ò–ù–¨–û–ù–ê –í–´–°–û–°–ê–¢–¨

    # bucket_name = settings.MINIO_BUCKET.format(user_id=candidate['id'])
    # file_name = candidate["photo"].split("/", 1)[1]
    # url = minio_client.presigned_get_object(bucket_name, file_name)
    candidate.pop("photo", None)

    caption = render("candidate_card.jinja2", **candidate)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data="like")],
        [InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data="dislike")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop_search")]
    ])

    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–ê–ù–ö–ï–¢–ê –°–§–û–†–ú–ò–†–û–í–ê–ù–ê –ò –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø")

    await call.message.answer(render("candidate_card.jinja2", **candidate), reply_markup=keyboard)


    # await call.message.answer_photo(url, caption=caption, reply_markup=keyboard)


@router.callback_query(F.data.in_(["like", "dislike"]))
async def handle_reaction(callback: CallbackQuery, state: FSMContext):
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–°–¢–†–ï–ú –ò–õ–ò –ù–û–†–ú")

    data = await state.get_data()
    index = data.get("current_index", 0)
    candidates = data.get("candidates", [])

    if index >= len(candidates):
        await callback.message.answer("üì≠ –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    if callback.data == "like":
        liked_user_id = candidates[index]["id"]
        logging.config.dictConfig(LOGGING_CONFIG)
        logger.info("–ü–û–°–¢–ê–í–ò–õ–ò –õ–ê–ô–ö")
        # user_id = callback.from_user.id

        # async with channel_pool.acquire() as channel:
        #     exchange = await channel.declare_exchange(
        #         "user_form", ExchangeType.TOPIC, durable=True
        #     )

        #     queue_name = settings.USER_QUEUE.format(user_id=user_id)
        #     user_queue = await channel.declare_queue(queue_name, durable=True)

        #     await user_queue.bind(exchange, routing_key=queue_name)

        #     request_body = {
        #         "user_id": user_id,
        #         "action": "like_user",
        #         "from_user_id": user_id,
        #         "to_user_id": liked_user_id
        #     }

        #     logging.config.dictConfig(LOGGING_CONFIG)
        #     logger.info("–ü–ï–†–ï–î –ü–ê–ë–õ–ò–®123 –í USER_MEASSAGES")

        #     await exchange.publish(
        #         aio_pika.Message(msgpack.packb(request_body)),
        #         routing_key="user_messages"
        #     )

        await notify_liked_user(liked_user_id, callback.from_user.id)

    await state.update_data(current_index=index + 1)
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–°–õ–ï–î–£–Æ–©–ò–ô!!!!!!!")
    await show_next_candidate(callback, state)


@router.callback_query(F.data == "stop_search")
async def stop_search(callback: CallbackQuery, state: FSMContext):
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–í–°–Å, –•–û–†–û–®. –ù–ê –ì–õ–ê–í–ù–£–Æ")
    await callback.message.answer("üìã –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await menu(callback.message)
    await state.clear()
    return
    

async def notify_liked_user(target_user_id, who_liked_id):
    logging.config.dictConfig(LOGGING_CONFIG)
    logger.info("–ú–´ –í –£–í–ï–î–û–ú–õ–ï–ù–ò–ò –û –õ–ê–ô–ö–ï")
