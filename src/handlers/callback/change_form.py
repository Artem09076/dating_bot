import re

import aio_pika
import msgpack
from aio_pika import ExchangeType
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from config.settings import settings
from src.handlers.callback.router import router
from src.handlers.command.gender import gender_keyboard
from src.handlers.state.change_form import EditProfileForm
from src.storage.minio import minio_client
from src.storage.rabbit import channel_pool

edit_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–º—è", callback_data="edit_name")],
        [InlineKeyboardButton(text="üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton(text="‚ôÇÔ∏è‚ôÄÔ∏è –ü–æ–ª", callback_data="edit_gender")],
        [InlineKeyboardButton(text="üìç –ì–æ—Ä–æ–¥", callback_data="edit_city")],
        [InlineKeyboardButton(text="üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="edit_interests")],
        [InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="edit_photo")],
        [
            InlineKeyboardButton(
                text="üîç –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É", callback_data="edit_preferences"
            )
        ],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_editing")],
    ]
)


@router.callback_query(F.data == "change_form")
async def start_editing(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_menu_keyboard
    )
    await state.set_state(EditProfileForm.choose_field)


@router.callback_query(EditProfileForm.choose_field)
async def choose_field_to_edit(call: CallbackQuery, state: FSMContext):
    data = call.data

    if data == "edit_name":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await state.set_state(EditProfileForm.name)
    elif data == "edit_age":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(EditProfileForm.age)
    elif data == "edit_gender":
        gender_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
                [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
                [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="gender_other")],
            ]
        )
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª:", reply_markup=gender_keyboard)
        await state.set_state(EditProfileForm.gender)
    elif data == "edit_city":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
        await state.set_state(EditProfileForm.city)
    elif data == "edit_interests":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(EditProfileForm.interests)
    elif data == "edit_photo":
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
        await state.set_state(EditProfileForm.photo)
    elif data == "edit_preferences":
        await call.message.answer("–ö—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? (–ú—É–∂—Å–∫–æ–π / –ñ–µ–Ω—Å–∫–∏–π / –í—Å–µ —Ä–∞–≤–Ω–æ)")
        await state.set_state(EditProfileForm.preferred_gender)
    elif data == "finish_editing":
        await save_updated_profile(call, state)


@router.message(EditProfileForm.name)
async def edit_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await back_to_edit_menu(message, state)


@router.message(EditProfileForm.age)
async def edit_age(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(age=int(message.text))
        await back_to_edit_menu(message, state)
    else:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@router.callback_query(EditProfileForm.gender)
async def handle_gender_selection(callback: CallbackQuery, state: FSMContext):
    gender_map = {
        "gender_male": "–ú—É–∂—Å–∫–æ–π",
        "gender_female": "–ñ–µ–Ω—Å–∫–∏–π",
        "gender_other": "–î—Ä—É–≥–æ–µ",
    }
    gender = gender_map.get(callback.data)

    if gender:
        await state.update_data(gender=gender)
        await callback.message.answer("‚úÖ –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω!")
        await state.set_state(EditProfileForm.confirm_changes)
    else:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)


@router.message(EditProfileForm.city)
async def edit_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await back_to_edit_menu(message, state)


@router.message(EditProfileForm.interests)
async def edit_interests(message: Message, state: FSMContext):
    interests = [i.strip() for i in message.text.split(",") if i.strip()]
    await state.update_data(interests=interests)
    await back_to_edit_menu(message, state)


@router.message(EditProfileForm.photo)
async def edit_photo(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        user_id = message.from_user.id
        file_name = f"photo_{user_id}_{file_id}"

        file = await message.bot.get_file(file_id)
        file_bytes = await message.bot.download_file(file.file_path)

        bucket_name = settings.MINIO_BUCKET.format(user_id=user_id)
        if not minio_client.bucket_exists(bucket_name):
            minio_client.make_bucket(bucket_name)

        minio_client.put_object(
            bucket_name=bucket_name,
            object_name=file_name,
            data=file_bytes,
            length=file.file_size,
            content_type="image/jpeg",
        )

        await state.update_data(photo=file_name)
        await back_to_edit_menu(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!")


@router.message(EditProfileForm.preferred_gender)
async def edit_preferred_gender(message: Message, state: FSMContext):
    gender_map = {"–ú—É–∂—Å–∫–æ–π": "–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π": "–ñ–µ–Ω—Å–∫–∏–π", "–í—Å–µ —Ä–∞–≤–Ω–æ": "–î—Ä—É–≥–æ–µ"}
    if message.text in gender_map:
        await state.update_data(preferred_gender=gender_map[message.text])
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")
        await state.set_state(EditProfileForm.preferred_age_min)
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )


@router.message(EditProfileForm.preferred_age_min)
async def edit_preferred_age_min(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(preferred_age_min=int(message.text))
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")
        await state.set_state(EditProfileForm.preferred_age_max)
    else:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@router.message(EditProfileForm.preferred_age_max)
async def edit_preferred_age_max(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(preferred_age_max=int(message.text))
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞?")
        await state.set_state(EditProfileForm.preferred_city)
    else:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")


@router.message(EditProfileForm.preferred_city)
async def edit_preferred_city(message: Message, state: FSMContext):
    await state.update_data(preferred_city=message.text)
    await back_to_edit_menu(message, state)


async def back_to_edit_menu(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ:", reply_markup=edit_menu_keyboard
    )
    await state.set_state(EditProfileForm.choose_field)


async def save_updated_profile(call: CallbackQuery, state: FSMContext):
    async with channel_pool.acquire() as channel:
        exchange = await channel.declare_exchange(
            "user_form", ExchangeType.TOPIC, durable=True
        )

        user_queue = await channel.declare_queue("user_messages", durable=True)

        await user_queue.bind(exchange, "user_messages")
        user_data = await state.get_data()
        body = {
            **user_data,
            "id": call.from_user.id,
            "action": "update_form",
        }
        await exchange.publish(
            aio_pika.Message(msgpack.packb(body)), routing_key="user_messages"
        )

        await call.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer("–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ")
    await state.clear()
