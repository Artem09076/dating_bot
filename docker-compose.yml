services:

  db:
    image: postgres:13.2
    ports:
      - "5432:5432"
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "postgres" ]
      interval: 1s
      retries: 20
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - database-data:/var/lib/postgresql/data
    
  redis:
    image: redis:6.2.4
    ports:
      - "6385:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  alembic:
    build:
      context: .
    entrypoint: [ "alembic" ]
    command: [ "upgrade", "head" ]
    depends_on:
      db:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus_config.yml"
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus

  bot:
    build:
      dockerfile: Dockerfile
      context: .
    command: uvicorn src.app:create_app --factory --host 0.0.0.0 --port 8001 --workers=1
    ports:
      - "8080:8001"
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/code

  consumer:
    build:
      dockerfile: Dockerfile
      context: .
    command: uvicorn consumer.web_app:create_app --factory --host 0.0.0.0 --port 8010 --workers=1
    ports:
      - "8090:8010"
    depends_on:
      rabbitmq:
         condition: service_healthy
    volumes:
       - .:/code
  
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio-data:/data
    command: server --console-address ":9001" /data

  celery_worker:
    build:
      context: .
    command: celery -A script.calculate_ratings worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/code

  celery_beat:
    build:
      context: .
    command: celery -A script.calculate_ratings beat --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/code

volumes:
  database-data:
    driver: local
  minio-data:
    driver: local